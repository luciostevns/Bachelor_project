---
title: "Bachelors Project"
format: html
editor: visual
---

# Investigating Cross-Reactivity Between Autoimmunogenic Epitopes and Pathogen Proteomes

## Summary

The project aims to investigate cross-reactivity between known autoimmunogenic epitopes, sourced from the IEDB database, and proteomes of pathogenic bacteria and viruses. To manage the complexity, I will cluster bacterial and viral proteomes using MMseqs2, selecting representative proteins from each group for analysis.

I will then, from biological knowledge, weigh the different amino acids positions. The usual culprit in cross reactivity is the MHCII which usually present 15mers. We know the usual hydrophobic clefts position in MHCII and the positions that are in contact with the TCR. From this we can weigh importance of specific positions. We will make a model that predicts the cross reactivity for a given protein, and we will test it on know autoimmunogenic proteins from pathogens.

## Method

Using IEDB i will find the epitopes that are found to be associated with all autoimmune diseases in humans.

The following filters where applied: "Epitope Structure", "Include Positive Assays", "MHC Restriction Type: Class II", "Host: Homo Sapiens (Human)", "Disease Data: Autoimmune Disease", "No MHC cell assays" and "No B cell assays", "Organism Source: Human".

These filters will ensure that I get only Linear MHC class II epitopes, that is found only with MHC assays, meaning that i will be able to find to MHC allele that was used. This will allow me to find the binding core, using netpanMHCII. and then find the anchor positions on the peptides. With the found anchor positions we can now weigh the conservation of this position more, allowing for more accurate cross-reactivity check.

This Returned \~? epitopes for analyzation.

### libraries

```{r}
#| message: false
#| warning: false

library("tidyverse")
library("Biostrings")
library("ggseqlogo")
library("biomaRt")
library("pdftools")
library("magick")
library("httr")
library("jsonlite")
library("stringdist")
```

### Data import

```{r}
#| message: false
#| warning: false

source("./functions.R")

# Reading in headers
headers <- read_csv("./Data/autoimmune_data.csv", n_max = 2, col_names = FALSE)

# Combine the first two rows into a single header
new_col_names <- paste(headers[1,], headers[2,], sep = "_")
new_col_names <- gsub("_NA$", "", new_col_names)

autoimmune_data <- read_csv("./Data/autoimmune_data.csv", skip = 2, col_names = new_col_names)

# From class will be replaced with bigger bacteria proteome dataset
pathogen_fasta <- readAAStringSet("./Data/IEDB_infectius_peptides.fsa",)

# Clustered bacteria proteome dataset using mmseq2
#pathogen_clusters <- read_tsv("./Data/infectius_cluster.tsv", col_names = c("cluster_ID", "member_ID"))

# Experimentally verifiyed pathogenic peptides causing autoimmune diseases
exp_verified_patho_peps <- read_csv("./Data/Exp_verified_pathogenic_peptides.txt")
exp_verified_prot_annot <- read_csv("./Data/temp_prot_annot_verified.csv")

exp_verified_patho_peps <- left_join(exp_verified_patho_peps, exp_verified_prot_annot, by = "ID") |>
  rename("Protein" = "Pathogen_pep") |>
  filter(!is.na(Pathogen_pep))

# Removing elements no longer needed
rm(headers)
rm(new_col_names)
rm(exp_verified_prot_annot)
```

### Wrangling IEDB tables

```{r}
#| message: false
#| warning: false

known_diseases <- c('multiple sclerosis',"type 1 diabetes mellitus", "rheumatoid arthritis", "myasthenia gravis","systemic lupus erythematosus", "Graves' disease, Graves disease", "autoimmune hemolytic anemia", "psoriasis", "autoimmune uveitis", "autoimmune thyroiditis", "vitiligo", "alopecia areata", "Vogt-Koyanagi-Harada disease", "Goodpasture syndrome", "Behcet's disease", 'systemic lupus erythematosus', 'neuromyelitis optica', 'primary biliary cholangitis', 'autoimmune hepatitis', 'autoimmune vasculitis', 'pemphigus',"Sjogren's syndrome")


# Tidying data and filtering with relevant filters
autoimmune_data <- autoimmune_data |>
  dplyr::rename(
    Assay_ID = "Assay ID_IEDB IRI",
    Epitope_ID = "Epitope_IEDB IRI",
    Seq = "Epitope_Name",
    Epitope_Protein = "Epitope_Molecule Parent",
    Epitope_Protein_annot = "Epitope_Molecule Parent IRI",
    Disease = "1st in vivo Process_Disease",
    MHC_Allele = "MHC Restriction_Name"
  ) |>
  mutate(
    Seq = str_trim(str_replace(Seq, "\\+.*", "")),
    Assay_ID = as.integer(str_extract(Assay_ID, "\\d+$")),
    Epitope_ID = as.integer(str_extract(Epitope_ID, "\\d+$")),
    Epitope_Protein_annot = str_extract(Epitope_Protein_annot, "(?<=/)[^/]+$")
  ) |>
  filter(
    is.na(`Epitope_Modified residues`),
    str_length(Seq) > 12 & str_length(Seq) < 26,
    !is.na(MHC_Allele) & !is.na(Seq),
    str_detect(Seq, "^[ACDEFGHIKLMNPQRSTVWY]+$"),
    Disease %in% known_diseases,
    !(str_detect(Epitope_Protein, "T cell") | str_detect(Epitope_Protein, "Immunoglobulin"))
  ) |>
  dplyr::select(
    Assay_ID, Epitope_ID, Seq, Epitope_Protein,
    Epitope_Protein_annot, Disease, MHC_Allele
  ) |>
  unique()

# Looking a MHC allele distrubution
autoimmune_data |>
  group_by(MHC_Allele) |>
  summarise(amount = n()) |>
  arrange(desc(amount))
```

### Looking at anchorpoints for MHC alleles from netMHCIIpan

```{r}
#| message: false
#| warning: false

DRB1_0401_motifs <- MHC_motif_finder("DRB1_0401")
DRB1_1501_motifs <- MHC_motif_finder("DRB1_1501")
DRB5_0101_motifs <- MHC_motif_finder("DRB5_0101")
```

### Tidying pathogen proteome data and filtering for MHC alleles and obtaining binding core:

```{r}
#| message: false
#| warning: false

# Making the pathogen proteome fastafile to a dataframe
pathogen_seqs <- data.frame(
    Pathogen_prot = names(pathogen_fasta),
    Seq = as.character(pathogen_fasta)
)

# Filtering pathogen proteome based on the found anchors
pathogen_DRB5_0101 <- Allele_filterer(pathogen_seqs, "[FYILV].{4}[ASGPN].{2}[KR]", c(2,3,4,5,7,8))

pathogen_DRB1_1501 <- Allele_filterer(pathogen_seqs, "[ILV].{2}[YF].{1}[SNGDA].{2}[LVAI]", c(2,3,5,7,8))

pathogen_DRB1_0401 <- Allele_filterer(pathogen_seqs, "[YFI].{2}[DEA].{1}[TNSDV].{2}[ASGQ]", c(2,3,5,7,8))
```

### Filtering IEDB data for MHC restriction and obtaining binding core:

using less stringent anchorpoints and extra filters to capture most of the actual reported MHC restriction

```{r}
#| message: false
#| warning: false

IEDB_DRB5_0101 <- Allele_filterer(autoimmune_data, "[FYILVW].{7}[KR]", c(2,3,4,5,7,8)) |>
  filter(str_detect(MHC_Allele, "DRB5\\*01:01") | MHC_Allele == "HLA class II")

IEDB_DRB1_1501 <- Allele_filterer(autoimmune_data, "[ILV].{2}[YF].{5}", c(2,3,5,7,8)) |>
  filter(str_detect(MHC_Allele, "DRB1\\*15:01") | MHC_Allele == "HLA class II")

IEDB_DRB1_0401 <- Allele_filterer(autoimmune_data, "[YFIW].{4}[TNSDV].{3}", c(2,3,5,7,8)) |>
  filter(str_detect(MHC_Allele, "DRB1\\*04:01") | MHC_Allele == "HLA class II")
```

### 

### Writing files for processing with faster python:

```{r}
#| eval: true
#| message: false
#| warning: false

write.csv(pathogen_DRB1_1501, "C:/Users/lucio/Desktop/DTU stuff/Bachelor stuff/Bachelor Python stuff/pathogen_DRB1_1501.csv", row.names = FALSE)
write.csv(IEDB_DRB1_1501, "C:/Users/lucio/Desktop/DTU stuff/Bachelor stuff/Bachelor Python stuff/IEDB_DRB1_1501.csv", row.names = FALSE)

write.csv(pathogen_DRB1_0401, "C:/Users/lucio/Desktop/DTU stuff/Bachelor stuff/Bachelor Python stuff/pathogen_DRB1_0401.csv", row.names = FALSE)
write.csv(IEDB_DRB1_0401, "C:/Users/lucio/Desktop/DTU stuff/Bachelor stuff/Bachelor Python stuff/IEDB_DRB1_0401.csv", row.names = FALSE)

write.csv(pathogen_DRB5_0101, "C:/Users/lucio/Desktop/DTU stuff/Bachelor stuff/Bachelor Python stuff/pathogen_DRB5_0101.csv", row.names = FALSE)
write.csv(IEDB_DRB5_0101, "C:/Users/lucio/Desktop/DTU stuff/Bachelor stuff/Bachelor Python stuff/IEDB_DRB5_0101.csv", row.names = FALSE)
```

### Displaying the python results:

```{r}
#| eval: true
#| message: false
#| warning: false

similarity_results_DRB1_1501 <- read_csv("./Data/similarity_results_DRB1_1501.csv")
similarity_results_DRB1_0401 <- read_csv("./Data/similarity_results_DRB1_0401.csv")
similarity_results_DRB5_0101 <- read_csv("./Data/similarity_results_DRB5_0101.csv")

all_similarities_significants <- bind_rows(similarity_results_DRB1_1501,
                                           similarity_results_DRB1_0401,
                                           similarity_results_DRB5_0101) |>
  left_join(dplyr::select(autoimmune_data, Epitope_ID, Disease, Epitope_Protein),
            by = "Epitope_ID") |>
  unique()

head(all_similarities_significants)
```

### Looking at what MHC alleles got caught in anchor filtering:

should match allele or be class II

```{r}
#| eval: true
#| message: false
#| warning: false

IEDB_DRB1_0401 |>
  group_by(MHC_Allele) |>
  summarise(n())

IEDB_DRB1_1501 |>
  group_by(MHC_Allele) |>
  summarise(n())

IEDB_DRB5_0101 |>
  group_by(MHC_Allele) |>
  summarise(n())
```

### Cluster wrangeling using mmseqs2:

using mmseqs and the IEDB_infectius_peptides.fsa, we cluster based on sequence similarity using a minimum sequence identity of 70% and a 80% alignment coverage

The discovery from this .fsa file was, that the sequences that had the same accession name was clustered together (which makes sense). Therefore we will simply take the original fasta, group them and pick 1 representative. This will reduce the amount of peptides we need to compare to our known autoimmune epitopes, allowing for faster computing.

```{bash}
#| eval: false

mmseqs createdb unique_IEDB_infectius_peptides.fsa infectius_peptides_DB

mmseqs cluster infectius_peptides_DB infectius_cluster tmp

mmseqs createtsv infectius_peptides_DB infectius_peptides_DB infectius_cluster infectius_cluster.tsv
```
