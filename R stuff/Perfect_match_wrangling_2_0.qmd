---
title: "Perfect_match_2_0_wrangling"
format: html
editor: visual
---

## Data analysis

### Libraries {#sec-libraries}

```{r}
library("tidyverse")
library("tidytext")
library("Biostrings")
library("ggvenn")
library("ggtree")
library("patchwork")
```

### Data load:

```{r}
perfect_match <- read_csv("./Data/perfect_matches_finished.csv")

perfect_match <- perfect_match |>
    mutate(
    Epitope_Source = case_when(
      str_detect(Epitope_Source, "acetyltransferase component of pyruvate dehydrogenase complex") ~ "acetyltransferase",
      TRUE ~ Epitope_Source
    ))

pathogen_data <- read_csv("./Data/wrangled_all_pathogen_prots.csv")

pathogen_data <- pathogen_data |>
  dplyr::rename("Pathogen_Annotation" = "Annotation",
                "Organism_Source" = Genus_Species) |>
  rowwise() |>
  mutate(protein_len = str_length(Sequence))

IEDB_data <- read_csv("./Data/wrangled_IEDB_with_sequences.csv")

IEDB_data <- IEDB_data |>
  dplyr::rename(IEDB_Protein_ID = "Protein_ID",
         Epitope_Source = "Protein_source") |>
  mutate(
    Epitope_Source = case_when(
      str_detect(Epitope_Source, "acetyltransferase component of pyruvate dehydrogenase complex") ~ "acetyltransferase",
      TRUE ~ Epitope_Source
    ))


fasta_files <- list.files("./Data/proteome_fastas_strain", pattern = "\\.fasta$", full.names = TRUE)
```

### Organism distribution in Bacterial proteomes data:

```{r}
# Function to extract genus_species from first header line
extract_genus_species_and_strain <- function(file) {
  fasta <- readAAStringSet(file)
  if (length(fasta) == 0) {
    return(tibble(
      Proteome_ID = basename(tools::file_path_sans_ext(file)),
      Genus_Species = NA,
      Strain = "unknown strain"
    ))
  }

  header <- names(fasta)[1]

  # Extract full OS field (up to OX)
  full_os <- str_match(header, "OS=([^=]+?) OX=")[,2]
  if (is.na(full_os)) {
    return(tibble(
      Proteome_ID = basename(tools::file_path_sans_ext(file)),
      Genus_Species = NA,
      Strain = "unknown strain"
    ))
  }

  words <- str_split(full_os, "\\s+")[[1]]
  genus_species <- str_c(words[1:2], collapse = " ")
  strain <- if (length(words) > 2) {
    str_c(words[3:length(words)], collapse = " ")
  } else {
    "unknown strain"
  }

  return(tibble(
    Proteome_ID = basename(tools::file_path_sans_ext(file)),
    Genus_Species = genus_species,
    Strain = strain
  ))
}


# Apply function to all FASTA files
Original_organism_df <- map_dfr(fasta_files, extract_genus_species_and_strain)
```

### Strain Analysis:

```{r}
pathogen_data |>
  filter(!is.na(Strain)) |>
  distinct(Protein_ID, .keep_all = TRUE) |>
  group_by(Organism_Source, Strain) |>
  mutate(Label = paste(Organism_Source, Strain, sep = " – ")) |>
  arrange(desc(num_proteins)) |>
  head(n = 20) |>
  ggplot(aes(x=reorder(Label, num_proteins),
                                   y = num_proteins)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(
    title = "Amount of protein for the Strain\nIn all bacteria proteomes",
    x = "Organism (Genus species)",
    y = "Amount of Proteins"
  ) +
  theme_minimal()


pathogen_data |>
  filter(!is.na(Strain)) |>
  group_by(Organism_Source, Strain) |>
  summarise(AA_len = sum(protein_len), .groups = "drop") |>
  mutate(Label = paste(Organism_Source, Strain, sep = " – ")) |>
  arrange(desc(AA_len)) |>
  head(n = 20) |>
  ggplot(aes(x = reorder(Label, AA_len), y = AA_len)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(
    title = "Total amino acid content per strain\n(top 20 strains across all bacterial proteomes)",
    x = "Organism – Strain",
    y = "Total Amino Acids"
  ) +
  theme_minimal()


```

### Pathogenic bacterial Proteomes annotation distribution analysis

```{r}

# Then, count occurrences in the perfect match data and merge
pathogen_data |>
  group_by(Pathogen_Annotation) |>
  summarise(annot_count = n(),
            organism_count = n_distinct(Strain)) |>
  arrange(desc(annot_count)) |>
  head(20) |>
  filter(Pathogen_Annotation != "Uncharacterized protein") |>
  ggplot(aes(x = reorder(Pathogen_Annotation, -annot_count), 
             y = annot_count, 
             fill = organism_count)) +  # Color by total protein count
  geom_bar(stat = "identity") +
  scale_y_log10() +
  scale_fill_viridis_c(option = "D") +
  theme_minimal() +
  coord_flip() +
  labs(
    title = "Distribution of amount of proteins per Annotation",
    x = "Panthogen Annotation",
    y = "Amount of Proteins",
    fill = "Strains with\nthis Annotation"
  )
  
```

### Epitope disease association distribution:

```{r}
IEDB_data |>
  group_by(Disease) |>
  summarise(n_disease = n(),
            n_protein = n_distinct(IEDB_Protein_ID)) |>
  arrange(desc(n_disease)) |>
  ggplot(aes(x = reorder(Disease, -n_disease), 
             y = n_disease, 
             fill = n_protein)) +  # Color by total protein count
  geom_bar(stat = "identity") +
  scale_y_continuous() +
  scale_fill_viridis_c(option = "D") +
  theme_minimal() +
  coord_flip() +
  labs(
    title = "Distribution of Disease in autoimmune epitopes",
    x = "Disease",
    y = "Disease occurence",
    fill = "Number of Proteins\nassociated with this Disease"
  )
```

### Sequence length distribution analysis (pathogen data):

```{r}
pathogen_data |>
  mutate(
    seq_len = nchar(Sequence),
    bin = cut(seq_len, breaks = 200)
  ) |>
  group_by(bin) |>
  summarise(
    protein_count = n(),
    annotation_diversity = n_distinct(Pathogen_Annotation),
    .groups = "drop"
  ) |>
  mutate(
    bin_label = as.character(bin),
    bin_mid = as.numeric(sub(".*,", "", sub("]", "", bin_label)))
  ) |>
  ggplot(aes(x = bin_mid, y = protein_count, fill = annotation_diversity)) +
  geom_col(color = "white") +
  scale_y_log10() +
  scale_x_continuous(
    name = "Approx. Protein Length (AA)",
    breaks = seq(0, 12000, by = 1000),
    labels = scales::label_comma(),
    expand = c(0, 0)
  ) +
  scale_fill_viridis_c(option = "D", name = "Unique Pathogen\nAnnotations") +
  theme_minimal() +
  labs(
    title = "Histogram of Pathogen Protein Lengths",
    y = "Frequency"
  )
```

### Sequence length distribution analysis (IEDB data):

```{r}
IEDB_data |>
  mutate(
    epitope_len = nchar(Sequence)
  ) |>
  group_by(epitope_len) |>
  summarise(
    count = n_distinct(Sequence),
    unique_sources = n_distinct(Epitope_Source),
    .groups = "drop"
  ) |>
  ggplot(aes(x = epitope_len, y = count, fill = unique_sources)) +
  geom_col(color = "white") +
  scale_fill_viridis_c(option = "D", name = "Unique Epitope\nSources") +
  labs(
    title = "Histogram of Epitope Lengths in IEDB",
    x = "Epitope Length (AA)",
    y = "Frequency"
  ) +
  theme_minimal()

```

### Perfect match sequence Original Sequence length analysis:

```{r}
perfect_match |>
  left_join(distinct(select(pathogen_data, Protein_ID, Sequence), .keep_all = TRUE),
            by = c("Pathogen_Protein_ID" = "Protein_ID")) |>
  mutate(seq_len = nchar(Sequence),
         bin = cut(seq_len, breaks = 200)) |>
  group_by(bin) |>
  summarise(
    protein_count = n(),
    annotation_diversity = n_distinct(Pathogen_Annotation),
    .groups = "drop"
  ) |>
  mutate(
    bin_label = as.character(bin),
    bin_mid = as.numeric(sub(".*,", "", sub("]", "", bin_label)))  # Extract upper edge of bin
  ) |>
  ggplot(aes(x = bin_mid, y = protein_count, fill = annotation_diversity)) +
  geom_col(color = "white") +
  scale_x_continuous(
    name = "Approx. Protein Length",
    labels = scales::label_comma(),
    expand = c(0, 0)
  ) +
  scale_y_log10() +
  scale_fill_viridis_c(option = "D") +
  scale_x_continuous(
  name = "Approx. Protein Length (AA)",
  breaks = seq(0, 12000, by = 100),  # Adjust max based on your data
  labels = scales::label_comma(),
  expand = c(0, 0)
) +
  theme_minimal() +
  labs(
    title = "Histogram of Pathogen Protein Lengths in Perfect Match",
    y = "Frequency",
    fill = "Unique Pathogen\nAnnotations"
  )
```

### Some good header for epitope length n organisms:

```{r}
perfect_match |>
  left_join(IEDB_data, by = "Assay_ID") |>
  mutate(epitope_len = str_length(Sequence)) |>
  group_by(epitope_len) |>
  summarise(assays = n_distinct(Assay_ID),
            strains = n_distinct(Strain),
            count = n()) |>
  ggplot(aes(x=epitope_len, y = strains, fill = assays)) +
  geom_bar(stat="identity") +
  scale_x_continuous(
    name = "Approx. Protein Length (AA)",
    breaks = seq(12, 26, by = 1),  # Adjust max based on your data
    labels = scales::label_comma(),
    expand = c(0, 0)
) +
  scale_fill_viridis_c(option = "D", name = "Unique Assays") +
  labs(
    title = "",
    x = "Epitope Length (AA)",
    y = "Number of matched strains"
  ) +
  theme_minimal()
```

### Pathogenic protein annotation distribution in perfect match analysis:

```{r}
# Then, count occurrences in the perfect match data and merge
perfect_match |>
  group_by(Pathogen_Annotation) |>
  summarise(annot_count = n(),
            n_organism = n_distinct(Organism_Source)) |>
  arrange(desc(annot_count)) |>
  ggplot(aes(x = reorder(Pathogen_Annotation, -annot_count), 
             y = annot_count, 
             fill = n_organism)) +  # Color by total protein count
  geom_bar(stat = "identity") +
  scale_fill_viridis_c(option = "D") +
  theme_minimal() +
  coord_flip() +
  labs(
    title = "Distribution of amount of proteins per Annotation\n In Perfect Match",
    x = "Pathogen Annotation",
    y = "Amount of Proteins",
    fill = "Organisms with\nThis Annotation"
  ) +
  theme(
    axis.text.y = element_blank(),  # Remove organism names for cleaner visualization
    axis.ticks.y = element_blank()
  )
```

### Organism analysis in perfect match:

```{r}
# Step 1: Summarize total proteins and AA per organism
organism_protein_counts <- pathogen_data |>
  group_by(Organism_Source) |>
  summarise(
    total_proteins = n_distinct(Protein_ID),
    total_AA = sum(protein_len),
    .groups = "drop"
  )

# Step 2: Merge with perfect match counts
organism_match_stats <- perfect_match |>
  group_by(Organism_Source) |>
  summarise(organism_count = n(), .groups = "drop") |>
  left_join(organism_protein_counts, by = "Organism_Source") |>
  arrange(desc(organism_count)) |>
  filter(!is.na(Organism_Source))

# Step 3a: All organisms plot (no organism names)
p_all <- ggplot(organism_match_stats, aes(x = reorder(Organism_Source, -organism_count), 
                                          y = organism_count, fill = total_AA)) +
  geom_bar(stat = "identity") +
  scale_y_log10() +
  scale_fill_viridis_c(option = "D") +
  coord_flip() +
  labs(
    x = NULL,
    y = "Organism Occurrence",
    fill = "Total AA's\nin Organism"
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid = element_blank(),
    axis.line = element_line(color = "black")
  )

# Step 3b: Top 20 organisms plot (with names)
p_top20 <- organism_match_stats |>
  slice_max(organism_count, n = 20) |>
  ggplot(aes(x = reorder(Organism_Source, organism_count), 
             y = organism_count, fill = total_AA)) +
  geom_bar(stat = "identity") +
  scale_y_log10() +
  scale_fill_viridis_c(option = "D") +
  coord_flip() +
  labs(
    x = "Organism (Genus species)",
    y = "Organism Occurrence",
    fill = "Total AA's\nin Organism"
  ) +
  theme_minimal() +
  theme(
    panel.grid = element_blank(),
    axis.line = element_line(color = "black")
  )

# Step 4: Combine and save
combined_plot <- p_top20 + p_all + plot_layout(ncol = 2)

ggsave("./final plots/perfect_match_organism_distribution_combined.png", combined_plot, width = 16, height = 7, dpi = 300)
```

### Organism enrichment analysis:

```{r}
# Compute proportion of each organism in the pathogen dataset
pathogen_distribution <- pathogen_data |> 
  group_by(Organism_Source) |> 
  summarise(total_proteins = n_distinct(Protein_ID),
            total_AA = sum(protein_len)) |>
  right_join(Original_organsism_df, by = c("Organism_Source" = "Genus_Species")) |>
  group_by(Organism_Source) |>
  summarise(n_strains = n(),
            n_proteins = unique(total_proteins),
            n_AA = unique(total_AA)) |>
  mutate(organism_ratio = n_strains/sum(n_strains))

# Compute proportion of each organism in the perfect match dataset
perfect_distribution <- perfect_match |> 
  group_by(Organism_Source) |> 
  summarise(n_organism_p = n()) |> 
  mutate(organism_ratio_p = n_organism_p / sum(n_organism_p))  # Compute proportion

# Merge datasets to align perfect match and pathogen data
enrichment_data <- left_join(perfect_distribution, pathogen_distribution, by = "Organism_Source") |> 
  mutate(
    enrichment_score = log2(organism_ratio_p / organism_ratio)
  ) |> 
  arrange(desc(enrichment_score))

# Plot the fully normalized enrichment scores
ggplot(enrichment_data, aes(x = reorder(Organism_Source, -enrichment_score), y = enrichment_score, fill=n_AA)) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_c(option = "D") +
  theme_minimal() +
  coord_flip() +
  labs(
    title = "Organism Enrichment\n(Perfect Matches vs. Bacterial Proteome)",
    x = "All Organisms",  
    y = "Enrichment Score",
    fill = "Number of AA's\t in Organism"
  ) +
  theme(
    axis.text.y = element_blank(),  # Remove organism names for cleaner visualization
    axis.ticks.y = element_blank()
  )

# Plot the fully normalized enrichment scores
ggplot(head(enrichment_data,20), aes(x = reorder(Organism_Source, -enrichment_score), y = enrichment_score, fill = n_AA)) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_c(option = "D") +
  theme_minimal() +
  coord_flip() +
  labs(
    title = "Top 20: Organism Enrichment\n(Perfect Matches vs. Bacterial Proteome)",
    x = "Organisms",  
    y = "Enrichment Score",
    fill = "Number of AA's\t in Organism"
  )
```

### Organism disease association analysis:

```{r}
org_disease_analysis <- perfect_match |> 
  group_by(Organism_Source, Disease) |> 
  summarise(num_epitopes = n_distinct(Assay_ID)) |>
  arrange(desc(num_epitopes))

summarized_data <- perfect_match |> 
  group_by(Organism_Source) |> 
  summarise(num_epitopes = sum(n_distinct(Assay_ID)), .groups = "drop") |> 
  arrange(desc(num_epitopes))

ggplot(org_disease_analysis, aes(x = factor(Organism_Source, levels = summarized_data$Organism_Source), 
                          y = num_epitopes, fill = Disease)) +
  geom_bar(position = "stack", stat="identity") +
  theme_minimal() +
  coord_flip() +
    theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  ) +
  labs(
    title = "Distrubution of epitope count for each organism",
    x = "Organisms",  
    y = "number of epitopes"
  )

top_20_analysis <- org_disease_analysis |> 
  filter(Organism_Source %in% head(summarized_data,20)$Organism_Source)

ggplot(top_20_analysis, aes(x = factor(Organism_Source, levels = head(summarized_data, 20)$Organism_Source), 
                          y = num_epitopes, fill = Disease)) +
  geom_bar(position = "stack", stat="identity") +
  theme_minimal() +
  coord_flip() +
  labs(
    title = "Distrubution of epitope count for each organism in Perfect Match",
    x = "Organisms",  
    y = "number of epitopes"
  )
```

### 

### Pathogen functional annotation analysis:

```{r}
# Compute proportion of each annotation in the pathogen dataset
pathogen_distribution <- pathogen_data |> 
  group_by(Pathogen_Annotation) |> 
  summarise(
    total_proteins = n(),  # Count total proteins with this annotation
    num_strains = n_distinct(Strain)  # Count unique organisms per annotation
  ) |> 
  mutate(P_pathogen = total_proteins / sum(total_proteins),  # Compute annotation proportion in pathogen dataset
         `Pathogen_Annotation` = str_wrap(`Pathogen_Annotation`, width = 30))  # Wrap long labels

# Compute proportion of each annotation in the perfect match dataset
perfect_distribution <- perfect_match |> 
  group_by(Pathogen_Annotation) |> 
  summarise(perfect_matches = n()) |> 
  mutate(P_perfect = perfect_matches / sum(perfect_matches),  # Compute annotation proportion in perfect matches
         `Pathogen_Annotation` = str_wrap(`Pathogen_Annotation`, width = 30))  # Wrap long labels

enrichment_data <- left_join(perfect_distribution, pathogen_distribution, by = "Pathogen_Annotation") |> 
  mutate(
    log2_enrichment = log2(P_perfect / P_pathogen)
  ) |> 
  arrange(desc(log2_enrichment))

ggplot(enrichment_data, aes(x = reorder(Pathogen_Annotation, -log2_enrichment), y = log2_enrichment, fill = num_strains)) +
  geom_bar(stat = "identity", color = "black") +
  theme_minimal() +
  coord_flip() +
  labs(
    title = "Pathogen Annotation Enrichment",
    x = "All Pathogen Annotations",  
    y = "Log2 Enrichment",
    fill = "Number of Strains"
  ) +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +  # Coloring based on number of organisms
  theme(
    axis.text.y = element_blank(),  # Remove organism names for cleaner visualization
    axis.ticks.y = element_blank()
  )

# Plot only the **top 20 enriched** pathogen annotations
ggplot(head(enrichment_data, 20), aes(x = reorder(Pathogen_Annotation, -log2_enrichment), y = log2_enrichment, fill = num_strains)) +
  geom_bar(stat = "identity", color = "black") +
  theme_minimal() +
  coord_flip() +
  labs(
    title = "Top 20: Pathogen Annotation Enrichment",
    x = "Pathogen Annotations",  
    y = "Log2 Enrichment",
    fill = "Number of Strains"
  ) +
  scale_fill_gradient(low = "lightblue", high = "darkblue")
```

### Disease enrichment analysis:

```{r}
pf_disease_enrichment <- perfect_match |>
  group_by(Disease) |>
  summarise(count = n()) |>
  mutate(pf_disease_ratio = count/sum(count))

IEDB_disease_enrichment <- IEDB_data |>
  group_by(Disease) |>
  summarise(count = n()) |>
  mutate(IEDB_disease_ratio = count/sum(count))

left_join(pf_disease_enrichment, IEDB_disease_enrichment, by = "Disease") |>
  mutate(log2_enrichment = log2(pf_disease_ratio/IEDB_disease_ratio)) |>
  arrange(desc(log2_enrichment)) |>
  select(Disease, log2_enrichment) |>
  ggplot(aes(x = reorder(Disease, log2_enrichment), y = log2_enrichment)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  coord_flip() +
  labs(
    title = "Disease enrichment analysis",
    x = "Disease",  
    y = "Log2 Enrichment"
  )
  
```

### Epitope functional annotation analysis:

```{r}

pf_epitope_annot_analysis <- perfect_match |> 
  group_by(Epitope_Source) |> 
  summarise(
    epitope_num = n()) |>
  mutate(pf_epitope_ratio = epitope_num/sum(epitope_num))

IEDB_epitope_annot_analysis <- IEDB_data |> 
  group_by(Epitope_Source) |> 
  summarise(
    epitope_num = n()) |>
  mutate(IEDB_epitope_ratio = epitope_num/sum(epitope_num))

left_join(pf_epitope_annot_analysis, IEDB_epitope_annot_analysis, by = "Epitope_Source") |>
  mutate(log2_enrichment = log2(pf_epitope_ratio/IEDB_epitope_ratio),
         Epitope_Source = str_wrap(Epitope_Source, 40)) |>
  arrange(desc(log2_enrichment)) |>
  ggplot(aes(x = reorder(Epitope_Source, log2_enrichment), y = log2_enrichment)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  coord_flip() +
  labs(
    title = "Epitope function annotation enrichment analysis",
    x = "Epitope Functional annotation",  
    y = "Log2 Enrichment"
  )
  
```

### Fisher test:

```{r}
# Define Fisher's test with Log2 Enrichment
fisher_test <- function(data1, data2, col, min_count = 5) {
  counts1 <- table(data1[[col]])
  counts2 <- table(data2[[col]])

  # Merge into a contingency table
  contingency_table <- merge(as.data.frame(counts1), as.data.frame(counts2), by = "Var1", all = TRUE)
  colnames(contingency_table) <- c("Category", "Perfect_Matches", "Full_Dataset")
  contingency_table[is.na(contingency_table)] <- 0  # Replace NA with 0

  # Convert counts to numeric
  contingency_table$Perfect_Matches <- as.numeric(contingency_table$Perfect_Matches)
  contingency_table$Full_Dataset <- as.numeric(contingency_table$Full_Dataset)

  # Remove low-count categories in perfect_matches
  contingency_table <- contingency_table[contingency_table$Perfect_Matches >= min_count, ]

  # Normalize to proportions
  contingency_table <- contingency_table %>%
    mutate(
      Perfect_Prop = Perfect_Matches / sum(Perfect_Matches),
      Full_Prop = Full_Dataset / sum(Full_Dataset),
      Log2_Enrichment = log2((Perfect_Prop + 1e-6) / (Full_Prop + 1e-6))  # Avoid log(0)
    )

  # Apply Fisher’s Exact Test row by row
  fisher_p_values <- sapply(1:nrow(contingency_table), function(i) {
    row <- contingency_table[i, ]
    matrix_data <- matrix(c(
      row[["Perfect_Matches"]], sum(contingency_table$Perfect_Matches) - row[["Perfect_Matches"]],
      row[["Full_Dataset"]], sum(contingency_table$Full_Dataset) - row[["Full_Dataset"]]
    ), nrow = 2)

    return(fisher.test(matrix_data)$p.value)
  })

  # Add p-values & adjust for multiple testing
  contingency_table$P_value <- fisher_p_values
  contingency_table$Adjusted_p_value <- p.adjust(fisher_p_values, method = "BH")

  return(contingency_table)
}


# Run Fisher's test for different attributes
fisher_results <- list(
  "Pathogen_Annotation" = fisher_test(perfect_match, pathogen_data,"Pathogen_Annotation"),
  "Epitope_Source" = fisher_test(perfect_match, IEDB_data, "Epitope_Source"),
  "Disease" = fisher_test(perfect_match, IEDB_data, "Disease"),
  "IEDB_Protein_ID" = fisher_test(perfect_match, IEDB_data, "IEDB_Protein_ID")
)

show_significant_results <- function(fisher_results, p_threshold = 0.05, enrichment_threshold = 0.6) {
  lapply(fisher_results, function(df) {
    df %>%
      filter(Adjusted_p_value < p_threshold & Log2_Enrichment > enrichment_threshold) %>%
      arrange(Adjusted_p_value)
  })
}


# Get significant results
significant_fisher_results <- show_significant_results(fisher_results)

# View results
significant_fisher_results[["Pathogen_Annotation"]]
significant_fisher_results[["Organism_Source"]]
significant_fisher_results[["Disease"]]
significant_fisher_results[["Epitope_Source"]]
significant_fisher_results[["IEDB_Protein_ID"]]

fisher_results[["Organism_Source"]] |>
  arrange(desc(Log2_Enrichment))
```

### filtering by these findings:

```{r}
for (col in names(significant_fisher_results)) {
  sig_categories <- significant_fisher_results[[col]]$Category
    significant_results <- perfect_match |>
    filter(!!sym(col) %in% sig_categories)  # Apply filter
}
```

### Boxplot of strains:

```{r}
perfect_match |>
  group_by(Organism_Source, Strain) |>
  summarise(n_matches = n(), .groups = "drop") |>
  ggplot(aes(x = reorder(Organism_Source,n_matches), y = n_matches)) +
  geom_boxplot() +
  labs(
    title = "Distribution of Matches per Strain by Species",
    x = "Species",
    y = "Number of Matches per Strain"
  ) +
  theme(
    axis.text.x = element_blank(),  # Remove organism names for cleaner visualization
    axis.ticks.x = element_blank()
  )

```

### Finding AA's per annotation in bacterial proteome:

```{r}

pathogen_data |>
  group_by(Pathogen_Annotation) |>
  summarise(
    amount = n(),
    seqs = list(Sequence),
    .groups = "drop"
  ) |>
  mutate(
    annot_AAs = map_int(seqs, ~ sum(nchar(.x)))
  ) |>
  filter(Pathogen_Annotation != "Uncharacterized protein") |>
  arrange(desc(annot_AAs)) |>
  ggplot(aes(x = reorder(Pathogen_Annotation, -annot_AAs), y = annot_AAs,
             fill = amount)) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_c(option = "D") +
  theme_minimal() +
  scale_y_log10() +
  coord_flip() +
  labs(
    title = "AA's per annotation in bacterial proteome",
    x = "Pathogen Annotation",  
    y = "AA count per annotation",
    fill = "Number of proteins\n with given annotation"
  ) +
  theme(
    axis.text.y = element_blank(),  # Remove organism names for cleaner visualization
    axis.ticks.y = element_blank()
  )
```

### Normalization with found biases:

```{r}

species_aa <- pathogen_data |>
  group_by(Organism_Source) |>
  summarise(species_AA = sum(nchar(Sequence)))

annotation_aa <- pathogen_data |>
  group_by(Pathogen_Annotation) |>
  summarise(annotation_AA = sum(nchar(Sequence)))

disease_freq <- IEDB_data |>
  group_by(Disease) |>
  summarise(disease_count = n())

epitope_lengths <- IEDB_data |>
  mutate(Epitope_Length = nchar(Sequence)) |>
  select(Assay_ID, Epitope_Length)

normalized_matches <- perfect_match |>
  left_join(species_aa, by = "Organism_Source") |>
  left_join(annotation_aa, by = c("Pathogen_Annotation")) |>
  left_join(disease_freq, by = "Disease") |>
  left_join(epitope_lengths, by = "Assay_ID") |>
  mutate(
    norm_by_species = 1 / species_AA,
    norm_by_annotation = 1 / annotation_AA,
    norm_by_disease = 1 / disease_count,
    norm_by_epitope_length = 1 / Epitope_Length,
    total_weight = norm_by_species * norm_by_annotation * norm_by_disease * norm_by_epitope_length
  )

normalized_matches |>
  group_by(Organism_Source, Pathogen_Annotation, Disease) |>
  summarise(norm_match_score = sum(total_weight),
            Assay_ID) |>
  arrange(desc(norm_match_score))

```

### How concentrated is Species around epitopes/proteins

```{r}
epitopes_to_species <- perfect_match |>
  distinct(Assay_ID, Organism_Source) |>
  count(Assay_ID, name = "species_matched")

species_to_epitopes <- perfect_match |>
  distinct(Assay_ID, Organism_Source) |>
  count(Organism_Source, name = "epitopes_matched")

ggplot(epitopes_to_species, aes(x = species_matched)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "white") +
  labs(
    title = "How Many Species Does Each Epitope Match?",
    x = "Number of Species Matched",
    y = "Number of Epitopes"
  ) +
  theme_minimal()
```

```{r}
# Step 1: Total strains per species
total_strains_per_species <- Original_organism_df |>
  distinct(Genus_Species, Strain) |>
  count(Genus_Species, name = "total_strains")

# Step 2: Count matched strains per epitope and species
matching_strains <- perfect_match |>
  distinct(Assay_ID, Organism_Source, Strain) |>
  count(Assay_ID, Organism_Source, name = "matched_strains")

# Step 3: Join and calculate % strain coverage
heatmap_prop_data <- matching_strains |>
  left_join(total_strains_per_species, by = c("Organism_Source" = "Genus_Species")) |>
  mutate(strain_match_pct = matched_strains / total_strains)

# Step 4: Add Epitope Source labels
epitope_labels <- IEDB_data |>
  select(Assay_ID, Epitope_Source) |>
  distinct()

heatmap_prop_data <- heatmap_prop_data |>
  left_join(epitope_labels, by = "Assay_ID")

# Step 5: Plot heatmap
ggplot(heatmap_prop_data, aes(x = Organism_Source, y = Assay_ID, fill = strain_match_pct)) +
  geom_tile(color = "grey90", linewidth = 0.3) +
  scale_fill_viridis_c(option = "C", labels = scales::percent_format(accuracy = 1)) +
  labs(
    title = "Epitope–Species Heatmap by % of Matching Strains",
    x = "Species",
    y = "Epitope (name as Epitope Source for clarity)",
    fill = "% Strains Matched"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 90, size = 6, hjust = 1),
    axis.text.y = element_text(size = 6)
  )

```

### Is few species cauing most of the matches?:

```{r}
# Step 1: Count number of pathogen matches per species (across all diseases)
species_match_counts <- perfect_match |>
  count(Organism_Source, name = "match_count")

# Step 2: Get total number of strains per species from original dataset
total_strains_per_species <- Original_organism_df |>
  distinct(Genus_Species, Strain) |>
  count(Genus_Species, name = "strain_count")

# Step 3: Merge strain info and keep top 20 species
plot_data <- species_match_counts |>
  left_join(total_strains_per_species, by = c("Organism_Source" = "Genus_Species")) |>
  arrange(desc(match_count)) |>
  slice_max(match_count, n = 20)

# Step 4: Plot total matches by species, colored by number of strains
ggplot(plot_data, aes(x = fct_reorder(Organism_Source, match_count), y = match_count, fill = strain_count)) +
  geom_col() +
  coord_flip() +
  scale_fill_viridis_c(option = "D", direction = -1) +
  labs(
    title = "Top 20 Pathogen Species by Total Epitope Matches",
    subtitle = "Bar color represents number of distinct strains in the original dataset",
    x = "Pathogen Species",
    y = "Total Matched Human Epitopes",
    fill = "Strains per Species"
  ) +
  theme_minimal(base_size = 13)

```

### Teaches plots:

```{r}

Epitope_groups <- perfect_match |>
  distinct(Assay_ID, Pathogen_Protein_ID, .keep_all = TRUE) |>
  group_by(Assay_ID) |>
  summarise(
    org_prot_matches = n_distinct(Organism_Source),
    Diseases_unique = unique(Disease),
    Diseases = list(Disease),
    Species_unique = list(unique(Organism_Source)),
    Species = list(Organism_Source),
    Strains_unique = list(unique(Strain)),
    Strains = list(paste(Organism_Source, "(", Strain, ")", sep = "")),
    pathogen_proteins = list(Pathogen_Protein_ID),
    pathogen_proteins_unique = list(unique(Pathogen_Protein_ID)),
    pathogen_prot_Subcellular_Location = list(pathogen_prot_Subcellular_Location),
    Epitope_Subcellular_Location = list(Epitope_Subcellular_Location),
    Pathogen_genes = list(Pathogen_Gene_Name),
    Pathogen_genes_unique = list(unique(Pathogen_Gene_Name))
  ) |>
  arrange(desc(org_prot_matches)) |>
  mutate(group = case_when(
    org_prot_matches > 20 ~ "3",
    org_prot_matches < 20 ~ "2"
  ))


group3_species <- Epitope_groups |>
  filter(group == "3") |>
  pull(pathogen_proteins_unique) |>
  unlist() |>
  unique()

# Now correctly create the named list for ggvenn
venn_data <- list(
  Few_matches = group3_species,
  Alot_matches = group3_species
)

# Plot the Venn diagram
ggvenn(venn_data, 
       fill_color = c("#F8766D", "#00BFC4"),
       stroke_size = 0.5,
       set_name_size = 5) +
  ggtitle("Pathogen protein Overlap Between Group 2 and Group 3")


ggplot(Epitope_groups, aes(x = reorder(IEDB_Protein_ID, org_prot_matches),
             y = org_prot_matches)) +
  geom_col() +
  coord_flip() +
  labs(
    title = "Number of Species matching to each IEDB protein",
    x = "IEDB protein ID",
    y = "Number of unique Species matched") +
  theme_minimal()
```

```{r}

Epitope_groups |>
  filter(group == "3") |>
  select(Epitope_Source, Diseases) |>
  unnest(Diseases) |>
  count(Epitope_Source, Diseases, name = "Match_Count") |>
  ggplot(aes(x = Epitope_Source, y = Diseases, fill = Match_Count)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(title = "Disease Associations for Group 3 Epitopes (Match Count)",
       x = "IEDB Protein", y = "Diseases", fill = "Disease Match\n Count") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1),
        plot.title = element_text(size = 14, hjust = 0.5))

Epitope_groups |>
  filter(group == "3") |>
  select(Epitope_Source, Species) |>
  unnest(Species) |>
  count(Epitope_Source, Species, name = "Match_Count") |>
  ggplot(aes(x = Epitope_Source, y = Species, fill = Match_Count)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(title = "Species Associations for Group 3 Epitopes (Match Count)",
       x = "IEDB Protein", y = "Species", fill = "Species Match\nCount") +
  theme_minimal() +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.text.x = element_text(angle = 60, hjust = 1)
  )


Epitope_groups |>
  filter(group == "3") |>
  select(Epitope_Source, Strains) |>
  unnest(Strains) |>
  ggplot(aes(x = Epitope_Source, y = Strains)) +
  geom_tile(color = "blue") +
  labs(title = "Strains Associations for Group 3 Epitopes",
       x = "IEDB Protein", y = "Strains") +
  theme_minimal() +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.text.x = element_text(angle = 60, hjust = 1)
  )


Epitope_groups |>
  filter(group == "3") |>
  select(Epitope_Source, pathogen_proteins_unique) |>
  unnest(pathogen_proteins_unique) |>
  ggplot(aes(x = Epitope_Source, y = pathogen_proteins_unique)) +
  geom_tile(color = "blue") +
  labs(title = "Pathogen proteins Associations for Group 3 Epitopes",
       x = "IEDB Protein", y = "Pathogen proteins") +
  theme_minimal() +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.text.x = element_text(angle = 60, hjust = 1)
  )

Epitope_groups |>
  filter(group == "3") |>
  select(Epitope_Source, pathogen_prot_Subcellular_Location) |>
  unnest(pathogen_prot_Subcellular_Location) |>
  count(Epitope_Source, pathogen_prot_Subcellular_Location, name = "Location_Count") |>
  ggplot(aes(x = Epitope_Source, y = pathogen_prot_Subcellular_Location, fill = Location_Count)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(
    title = "Subcellular Locations for pathogen \nproteins mathing to Epitopes",
    x = "Epitope Source",
    y = "Subcellular Location",
    fill = "Location Count"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 60, hjust = 1),
    plot.title = element_text(size = 14, hjust = 0.5)
  )

```

```{r}
Epitope_groups |>
  filter(group == "2") |>
  select(Epitope_Source, Diseases) |>
  unnest(Diseases) |>
  count(Epitope_Source, Diseases, name = "Match_Count") |>
  ggplot(aes(x = Epitope_Source, y = Diseases, fill = Match_Count)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(title = "Disease Associations for Group 2 Epitopes (Match Count)",
       x = "IEDB Protein", y = "Diseases", fill = "Disease Match\n Count") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1),
        plot.title = element_text(size = 14, hjust = 0.5))

Epitope_groups |>
  filter(group == "2") |>
  select(Epitope_Source, Species) |>
  unnest(Species) |>
  count(Epitope_Source, Species, name = "Match_Count") |>
  ggplot(aes(x = Epitope_Source, y = Species, fill = Match_Count)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(title = "Species Associations for Group 2 Epitopes (Match Count)",
       x = "IEDB Protein", y = "Species", fill = "Species Match\nCount") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 60, hjust = 1)
  )


Epitope_groups |>
  filter(group == "2") |>
  select(Epitope_Source, Strains) |>
  unnest(Strains) |>
  ggplot(aes(x = Epitope_Source, y = Strains)) +
  geom_tile(color = "blue") +
  labs(title = "Strains Associations for Group 2 Epitopes",
       x = "IEDB Protein", y = "Strains") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 60, hjust = 1),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )


Epitope_groups |>
  filter(group == "2") |>
  select(Epitope_Source, pathogen_proteins) |>
  unnest(pathogen_proteins) |>
  ggplot(aes(x = Epitope_Source, y = pathogen_proteins)) +
  geom_tile(color = "blue") +
  labs(title = "Pathogen proteins Associations for Group 2 Epitopes",
       x = "IEDB Protein", y = "Pathogen proteins") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 60, hjust = 1),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )

Epitope_groups |>
  filter(group == "2") |>
  select(Epitope_Source, Pathogen_genes) |>
  unnest(Pathogen_genes) |>
  ggplot(aes(x = Epitope_Source, y = Pathogen_genes)) +
  geom_tile(color = "blue") +
  labs(title = "Pathogen gene names Associations for Group 2 Epitopes",
       x = "IEDB Protein", y = "Pathogen Gene names") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 60, hjust = 1),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )

Epitope_groups |>
  filter(group == "2") |>
  select(Epitope_Source, pathogen_prot_Subcellular_Location) |>
  unnest(pathogen_prot_Subcellular_Location) |>
  count(Epitope_Source, pathogen_prot_Subcellular_Location, name = "Location_Count") |>
  ggplot(aes(x = Epitope_Source, y = pathogen_prot_Subcellular_Location, fill = Location_Count)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(
    title = "Subcellular Locations for pathogen \nproteins mathing to Epitopes",
    x = "Epitope Source",
    y = "Subcellular Location",
    fill = "Location Count"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 60, hjust = 1),
    plot.title = element_text(size = 14, hjust = 0.5)
  )
```

```{r}
group3_analysis <- Epitope_groups |>
  filter(group == "3") |>
  unnest(Diseases_unique, pathogen_proteins_unique) |>
  group_by(Diseases_unique) |>
  summarise(pathogen_proteins_unique = list(unique(pathogen_proteins_unique)))

RA <- group3_analysis |>
  filter(Diseases_unique == "rheumatoid arthritis") |>
  pull(pathogen_proteins_unique) |>
  unlist() |>
  unique()

diabetes <- group3_analysis |>
  filter(Diseases_unique == "type 1 diabetes mellitus") |>
  pull(pathogen_proteins_unique) |>
  unlist() |>
  unique()

# Now correctly create the named list for ggvenn
venn_data <- list(
  RA = RA,
  Diabetes = diabetes
)

# Plot the Venn diagram
ggvenn(venn_data, 
       fill_color = c("#F8766D", "#00BFC4"),
       stroke_size = 0.5,
       set_name_size = 5) +
  ggtitle("Pathogen protein Overlap Between RA and Diabetes in Group 3")

```

```{r}
Epitope_groups |>
  filter(group == 2) |>
  filter(!is.na(Epitope_Subcellular_Location)) |>
  select(Epitope_Source, Epitope_Subcellular_Location) |>
  unnest(Epitope_Subcellular_Location) |>
  count(Epitope_Source, Epitope_Subcellular_Location, name = "Location_Count") |>
  ggplot(aes(x = Epitope_Source, y = Epitope_Subcellular_Location, fill = Location_Count)) +
  geom_tile(color = "white") +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(
    title = "Subcellular Locations of Epitope Proteins",
    x = "Epitope Source",
    y = "Epitope Subcellular Location",
    fill = "Count"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 60, hjust = 1),
    plot.title = element_text(size = 14, hjust = 0.5)
  )
```

### Phylip tree:

```{r}
gram_df <- tibble(
  label = tree$tip.label,
  Gram = case_when(
    label %in% c("Bacillus", "Clostridium", "Corynebacterium", "Mycobacterium", "Streptococcus", "Enterococcus") ~ "Gram-positive",
    TRUE ~ "Gram-negative"
  )
)

ggtree(tree) %<+% gram_df +  # Join data onto tree
  geom_tiplab(aes(color = Gram), size = 3.5) +
  scale_color_manual(values = c("Gram-positive" = "steelblue", "Gram-negative" = "firebrick")) +
  theme_tree2() +
  theme(legend.position = "right")
```
